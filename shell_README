PROJECT DESCRIPTION: May 2023, "Alx-Holberton School" "0x16.C - Simple_shell

Shell.h : This header file contains function prototypes, structure definition, macros and constants used through out this project. This serves as an interface for the source files to access shared declarations, promoting modality and code organization.

Shell.c: This is the main entry point of the shell.This file initializes necessary variables, sets up the environment, displays a prompt and handles the main loop for
reading and executing a command.

split_token.c: This file deals with parsing the user input into individual commands and their arguments. It contains function tht splits the input string into tokens.  It also handles special characters and organized the parsed data for further processing.

getline.c: This file handles reading a line of input from the user and storing it in a buffer. It also contains functions that performs neccessory operations like input validation or memory allocation.

helper.c: This contains utility functions that are used throughout the coding. it includes commonly functions like string manipulation and  memory management.

linkedlist.c: This file implements a linked list data structure. It includs functions to create, modify and traverse linked list.

str_func.c and str_funs1c: These are files containing string manipulation functions

environ_builtins.c: This file implements functions related o managing environment variables. It contains builtin commands specifically related to environment variables.

builtin_help.c: This files handles the impementation of built-in commands. It includes functions that execute built-in commands like cd, exit and other commands specified in this project requrements.

alias_builtin.c: This file contains functions to handle alias- related operations. It includes functions to create, retrieve or resolve aliases specified by the user.

proc_command.c: This file handles communication with the procfs(process file system) in unix-like systems.

search.c: This file contains functions to locateexecutables in the systems path variable. It include functions to search for executables in the directories specified by the path variable and verify their existance or accessibility.

errors.: These files contains error handling functions such as printing error messages or terminating a program gracefully.

shellby\fR \- simple UNIX command interpreter

Shellby\fR is a simple UNIX command language interpreter that reads commands from either a file or standard input and executes them.

Invocation
.in +2n
\fBShellby\fR can be invoked both interactively and non-interactively.
If \fBshellby\fR is invoked with standard input not connected to a terminal, it reads and executes received commands in order.

If \fBshellby\fR is invoked with standard input connected to a terminal (determined by \fIisatty(3)\fR), an \fIinteractive\fR shell is opened.
When executing interactively, \fBshellby\fR displays the prompt \fI$ \fR when it is ready to read a command.

Alternatively, if command line arguments are supplied upon invocation, \fBshellby\fR treats the first argument as a file from which to read commands.
The supplied file should contain one command per line.
.B Shellby\fR runs each of the commands contained in the file in order before exiting.

. Environment - Upon invocation, \fBshellby\fR receives and copies the environment of the parent process in which it was exeucted.

This \fBenvironment\fR is an array of \fIname-value\fR strings describing variables in the format \fINAME=VALUE\fR.

Command Execution - After receiving a command, \fBshellby\fR tokenizes it into words using \fB" "\fR as a delimiter.
The first word is considered the command and all remaining words are considered arguments to that command.

Shellby\fR will also proceeds with the following actions:


A. If the first character of the command is neither a slash (\fI\\\fR) nor dot (\fI.\fR), the shell searches for it in the list of shell builtins.
If a shell builtin has the name, then the builtin is invoked.

B. If the first character of the command is none of a slash (\fI\\\fR), dot (\fI.\fR), nor builtin, \fBshellby\fR searches each element of the
\fBPATH\fR environmental variable for a directory containing an executable file by specified name.

C. If the first character of the command is a slash (\fI\\\fR) or dot (\fI.\fR) or either of the above searches was successful,
the shell executes the named program with any remaining arguments given in a separate execution environment.

. Exit Status - Shellby\fR returns the exit status of the last command executed, unless a syntax error occurs, with zero indicating success and non-zero indicating failure.

The return status is 127 if the command is found; if the found command is not executable, the return status is 126.

. All builtins return zero on success and one or two on incorrect usage (indicated by a corresponding error message).

. While running in interactive mode, \fBshellby\fR ignores the keyboard input \fBCtrl+c\fR.
Alternatively, an input of end-of-file (\fBCtrl+d\fR) will exit the program.

Variable Replacement - Shellby\fR inerprets the \fI$\fR character for variable replacement
 $ENV_VARIABLE\fR\fIENV_VARIABLE\fR is subsituted with its value.
 $?\fR\fI?\fR is substituted with the return value of the last program executed.

The second \fI$\fR is substituted with the current process ID.
.RE

. Comments - Shellby\fR ignores all words and characters preceeded by a \fI#\fR character on a line.
.in

. Commands separated by a \fI;\fR are executed sequentially.


. command1\fR && \fIcommand2\fR: \fIcommand2\fR is executed if, and only if, \fIcommand1\fR returns an exit status of zero.

logical operator - command1\fR || \fIcommand2\fR: \fIcommand2\fR is executed if, and only if, \fIcommand1\fR returns a non-zero exit status.

The operators \fI&&\fR and \fI||\fR have equal precedence, followed by \fI;\fR.
.RE

. Shellby Builtin Commands

Usage: .B cd [DIRECTORY]

Changes the current directory of the process to \fBDIRECTORY\fR.

If no argument is given, the command is interpreted as \fBcd $HOME\fR.

If the argument \fB-\fR is given, the command is interpreted as \fBcd $OLDPWD\fR.

The environment variables \fBPWD\fR and \fBOLDPWD\fR are updated after a change of directory.

alias

Usage: \fBalias [NAME[='VALUE'] ...]\fR

Handles aliases - alias\fR: Prints a list of all aliases, one per line, in the form \fINAME='VALUE'\fR.

.I alias NAME [NAME2 ...]\fR: Prints the aliases \fINAME\fR, \fINAME2\fR, etc. one per line, in the form \fINAME='VALUE'\fR.

.I alias NAME='VALUE' [...]\fR: Defines an alias for each \fINAME\fR whose \fIVALUE\fR is given.
If \fIname\fR is already an alias, its value is replaced with \fIVALUE\fR.

Exits the shell - The \fBSTATUS\fR argument is the integer used to exit the shell.

If no argument is given, the command is interpreted as \fBexit 0\fR

env - Prints the current environment.

setenv - Initializes a new environment variable, or modifies an existing one

unsetenv: Removes an environmental variable.

access(2), chdir(2), execve(2), _exit(2), exit(3), fflush(3), fork(2), free(3), isatty(3), getcwd(3), malloc(3), open(2), read(2), sh(1), signal(2), stat(2), wait(2), write(2)

.B Shellby\fR emulates basic functionality of the \fBsh\fR shell.
This shell_README emulates from the corresponding man pages sh(1) and dash(1).

authors: CHIKA Ann Obidiegwu <annobidiegwu@gmail.com>

Sayed ATEF Mohamed <sayedatef6293@gmail.com>
